// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (
  name, bio
) VALUES (
  $1, $2
)
RETURNING id, name, bio
`

type CreateAuthorParams struct {
	Name string      `db:"name" json:"name"`
	Bio  pgtype.Text `db:"bio" json:"bio"`
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.db.QueryRow(ctx, createAuthor, arg.Name, arg.Bio)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

type CreateAuthorsParams struct {
	Name string      `db:"name" json:"name"`
	Bio  pgtype.Text `db:"bio" json:"bio"`
}

const createNewUser = `-- name: CreateNewUser :one
WITH new_user AS (
  INSERT INTO "public"."user"
  ("name", "email", "email_verified", "image")
       VALUES ($1, $2, $3, $4)
       RETURNING id AS user_id
), new_account AS (
  INSERT INTO "public"."account"
  ("account_id", "provider_id", "access_token", "refresh_token", "id_token", "scope","user_id")
       SELECT $5, $6, $7, $8, $9, $10, user_id
         FROM new_user
       RETURNING id AS account_id, user_id
), new_session AS (
  INSERT INTO "public"."session"
  ("expires_at", "token", "ip_address", "user_agent", "user_id")
       SELECT $11,
              $12,
              $13,
              $14,
              a.user_id
         FROM new_account a
       RETURNING id AS session_id, user_id
 )
SELECT
session_id, user_id
FROM
new_session
`

type CreateNewUserParams struct {
	Name          string           `db:"name" json:"name"`
	Email         string           `db:"email" json:"email"`
	EmailVerified bool             `db:"email_verified" json:"email_verified"`
	Image         pgtype.Text      `db:"image" json:"image"`
	AccountID     string           `db:"account_id" json:"account_id"`
	ProviderID    string           `db:"provider_id" json:"provider_id"`
	AccessToken   pgtype.Text      `db:"access_token" json:"access_token"`
	RefreshToken  pgtype.Text      `db:"refresh_token" json:"refresh_token"`
	IDToken       pgtype.Text      `db:"id_token" json:"id_token"`
	Scope         pgtype.Text      `db:"scope" json:"scope"`
	ExpiresAt     pgtype.Timestamp `db:"expires_at" json:"expires_at"`
	Token         string           `db:"token" json:"token"`
	IpAddress     pgtype.Text      `db:"ip_address" json:"ip_address"`
	UserAgent     pgtype.Text      `db:"user_agent" json:"user_agent"`
}

type CreateNewUserRow struct {
	SessionID string `db:"session_id" json:"session_id"`
	UserID    string `db:"user_id" json:"user_id"`
}

func (q *Queries) CreateNewUser(ctx context.Context, arg CreateNewUserParams) (CreateNewUserRow, error) {
	row := q.db.QueryRow(ctx, createNewUser,
		arg.Name,
		arg.Email,
		arg.EmailVerified,
		arg.Image,
		arg.AccountID,
		arg.ProviderID,
		arg.AccessToken,
		arg.RefreshToken,
		arg.IDToken,
		arg.Scope,
		arg.ExpiresAt,
		arg.Token,
		arg.IpAddress,
		arg.UserAgent,
	)
	var i CreateNewUserRow
	err := row.Scan(&i.SessionID, &i.UserID)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAuthor, id)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT id, name, bio FROM authors
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, id int32) (Author, error) {
	row := q.db.QueryRow(ctx, getAuthor, id)
	var i Author
	err := row.Scan(&i.ID, &i.Name, &i.Bio)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, name, bio FROM authors
ORDER BY name
`

func (q *Queries) ListAuthors(ctx context.Context) ([]Author, error) {
	rows, err := q.db.Query(ctx, listAuthors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name, &i.Bio); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuthor = `-- name: UpdateAuthor :exec
UPDATE authors
  set name = $2,
  bio = $3
WHERE id = $1
`

type UpdateAuthorParams struct {
	ID   int32       `db:"id" json:"id"`
	Name string      `db:"name" json:"name"`
	Bio  pgtype.Text `db:"bio" json:"bio"`
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) error {
	_, err := q.db.Exec(ctx, updateAuthor, arg.ID, arg.Name, arg.Bio)
	return err
}
